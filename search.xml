<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java Input and Output]]></title>
    <url>%2F2017%2F08%2F31%2F20170831_Java%20Input%20and%20Output%2F</url>
    <content type="text"><![CDATA[刚开始找工作，做了几个公司的算法题，有的只需要写函数，有的需要自己写输入输出。虽然自己之前一直用Java，但没太注意Java控制台的输入输出处理，因此有的算法题因为输入问题导致编译失败。故在此总结一下Java中常用的输入数据处理的几种方式及注意事项。 next() next()读取到有效字符后才能结束输入，对输入有效字符之前遇到的空格键、Tab键或Enter键等结束符，next()方法会自动将其去掉，只有在输入有效字符之后，next()方法才将其后输入的空格键、tab键或enter键等视为分隔符或结束符。 nextLine() nextLine()方法的结束符只是Enter键，即nextLine()方法返回的是Enter键之前的所有字符，它是可以得到带空格的字符串的。 next()只读空格之前的数据，后面的nextLine()会继续读取前面留下的数据。 想要读取整行，就是用nextLine()。 读取数字也可以使用nextLine()，不过需要转换：Integer.parseInt(cin.nextLine())。 注意在next()、nextInt()与nextLine()一起使用时，next()、nextInt()往往会读取部分数据（会留下”\n”或者空格之后的数据）。 example1：输入多行时next()和nextLine()的区别public class Main { public static void main(String args[]){ Scanner input = new Scanner(System.in); int n = input.nextInt(); String str = input.nextLine(); System.out.println(&quot;END&quot;) } } 从执行结果上看，貌似直接跳过了String str = input.nextLine()。其实不是，原因是：nextInt()只读取数值，剩下”\n”没有读取，nextLine()会读取”\n”并结束。 如果想在nextInt()之后读取一行，需要在nextInt()之后额外加上cin.nextLine()，如下： public class Main { public static void main(String args[]){ Scanner input = new Scanner(System.in); int n = input.nextInt(); input.nextLine(); String str = input.nextLine(); System.out.println(&quot;END&quot;); } } example2：输入多行 输入要求第一行输入m个数，用空格隔开，第二行输入一个数，并将第一行的m个数存入数组中。 public class Main { public static void main(String args[]){ Scanner input = new Scanner(System.in); String str = input.nextLine(); int k = input.nextInt(); String[] strs = str.split(&quot; &quot;); int[] m = new int[strs.length]; for (int i = 0; i &lt; strs.length; i++) m[i] = Integer.parseInt(strs[i]); for (int i = 0; i &lt; m.length; i++) System.out.println(m[i]); } } example3：输入多行 输入要求第一行输入n(代表行数)，之后输入n行数据或者字符串。 case1:输入n行数据 public class Main { public static void main(String args[]){ Scanner input = new Scanner(System.in); int n = input.nextInt(); int[] nums = new int[n]; for (int i = 0; i &lt; n; i++) { nums[i] = input.nextInt(); } for (int i = 0; i &lt; n; i++) { System.out.println(nums[i]); } } } case2:输入n行字符串(两种写法) public class Main { public static void main(String args[]){ Scanner input = new Scanner(System.in); int n = input.nextInt(); // input.nextLine(); String[] nums = new String[n]; for (int i = 0; i &lt; n; i++) { //nums[i] = input.nextLine(); nums[i] = input.next(); } for (int i = 0; i &lt; n; i++) { System.out.println(nums[i]); } } } 以上就是在算法编程题中经常出现的几种输入情况，对算法编程题基本够用。有关Java IO的详细介绍请参考《Thing in Java》]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Image .ppm format introduction]]></title>
    <url>%2F2017%2F07%2F12%2F20170713_Image%20.ppm%20format%20introduction%2F</url>
    <content type="text"><![CDATA[ppm格式也是一种图像格式，下面讲解ppm文件格式。 PPM图像格式分为两部分，分别为头部和图像数据两部分。 头部由3部分组成(通过换行或空格进行分割，一般PPM的标准是空格)： 1.P3或P6，指明PPM的编码格式; 2.图像的宽度和高度，通过ASCII表示; 3.最大像素值，0-255字节表示。 图像数据部分： ASCII格式：按RGB的顺序排列，RGB中间用空格隔开，图片每一行用回车隔开； Binary格式：PPM用24bits代表每一个像素，红绿蓝分别占用8bits。 关于更相信的说明请参考：PPM文件格式详解]]></content>
      <categories>
        <category>PedestrianDetection</category>
      </categories>
      <tags>
        <tag>PedestrianDetection</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Image格式转换ppm-jpg]]></title>
    <url>%2F2017%2F07%2F12%2F20170713_Image%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2ppm-jpg%2F</url>
    <content type="text"><![CDATA[最近在做行人检测方面的相关研究，下载的MIT行人数据库中的image格式为ppm,而ppm图像格式在win7下无法查看(Ubuntu下可以)，因此将其转换为jpg格式。 ppm to jpg的具体code(Python write)： import os from PIL import Image #img = Image.open(&apos;C:\Users\gbs\Desktop\pedestrians128x64\per00001.ppm&apos;) #img.save(&apos;C:\Users\gbs\Desktop\mit\per00001.jpg&apos;) #img.show() pathOrigin = &apos;C:\Users\gbs\Desktop\pedestrians128x64\\&apos; pathDestination = &apos;C:\Users\gbs\Desktop\mit\\&apos; pathDir = os.listdir(pathOrigin) #print pathDir for i in pathDir: child = os.path.join(pathOrigin, i) #print child img = Image.open(child) img.save(pathDestination + i[0:9] + &apos;jpg&apos;) PIL(Python Imaging Library,Python图像处理库)，Image为其中的重要模块。]]></content>
      <categories>
        <category>PedestrianDetection</category>
      </categories>
      <tags>
        <tag>PedestrianDetection</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Import Python图像处理模块]]></title>
    <url>%2F2017%2F07%2F12%2F20170712_Import%20Python%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E6%A8%A1%E5%9D%97%2F</url>
    <content type="text"><![CDATA[参考网上教程，在导入PIL(Python Imaging Library Python,图像处理类库)时，提示无法找到image包，具体原因是是平台的问题，在Win764位系统上直接写入import Image将无法找到Image包。 一些教程默认直接写： import Image 但在window764位系统中如果没有在cmd中执行(Anaconda默认安装PIL)： pip install PIL 则找不到Image模块，所以必须先安装Pillow，在cmd中运行： pip install Pillow 因此导入image时的写法： from PIL import Image 至此，bug解决。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Pycharm and Python环境配置]]></title>
    <url>%2F2017%2F07%2F11%2F20170705_Pycharm-Python%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[在Win7环境下学习Python，PyCharm加载numpy等库时不方便，简单的做法：如果PC上安装Canopy，可加载Canopy环境中的python.exe，方便利用Canopy中的相关库。 加载Canopy环境中的python.exe： 定制个性化的开发环境： 配置完之后的效果： 在实际使用中，Pycharm集成开发环境非常好用，但是占内存较大，如果pc性能不好，运行起来会比较卡。]]></content>
      <categories>
        <category>install</category>
      </categories>
      <tags>
        <tag>install</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenCV环境配置]]></title>
    <url>%2F2017%2F07%2F01%2F20170701_OpenCV%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[最近在做行人检测方面的相关内容，需要用到OpenCV，但环境配置了多半天，因此将配置中的注意事项记录下来。 OpenCV目前主要分两个版本，分别是Version2.4和Version3.0，这两个版本之间差别比较大，改动也比较多，大家可以到官网上查看，这里只记录注意事项。 在配置OpenCV环境时，目录opencv-&gt;build-&gt;x86 or X64，配置时需要自己选择，一般选择X86就可以，网上配置过程很多，读者可参考。 OpenCV需要和VS兼容，不同版本的OpenCV需要使用不同的VS版本。在目录opencv-&gt;build-&gt;x86 or X64下，会有VS10、VS11、VS12等目录，具体兼容关系如下： VC10 = Visual Studio 2010 VC11 = Visual Studio 2012 VC12 = Visual Studio 2013 在实际操作中，需要查看VC版本，看是否对应。]]></content>
      <categories>
        <category>install</category>
      </categories>
      <tags>
        <tag>install</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[makeOS30days_1]]></title>
    <url>%2F2017%2F06%2F14%2F20170614_makeOS30days%2F</url>
    <content type="text"><![CDATA[之前一直想自己写一个小的OS，但由于时间和杂七杂八的因素，一直搁置。最近时间稍微宽松点，因此又萌生了写一个小的OS的想法，查阅了大部分关于OS的资料，最后决定先从最简单的开始，参考《30天自制操作系统》川合秀实，熟悉最简单的OS的搭建。 在makeOS的过程中，相关sourcecode将随时同步到我的 GitHub 上，并且将sourcecode中的日文注释改为中文，大家如果感兴趣，可自行下载。makeOS环境的所有资料我将会完成该OS后上传。 目前为止，已经看了前两章的内容，讲的比较通俗易懂，比较适合初学者学习。]]></content>
      <categories>
        <category>makeOS30days</category>
      </categories>
      <tags>
        <tag>makeOS30days</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Github个人博客搭建]]></title>
    <url>%2F2017%2F05%2F27%2F20170528_Hexo-Github%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[最近花费了两周的时间搭建了一个简单的个人Blog,主要的想法是记录分享一些自己在学习工作中的想法。在之前的工作学习过程中，习惯在笔记本上记录相关的问题解决方案，随着时间的积累，笔记本攒了好几个，但查找起来特别不方便，因此搭建该博客记录生活中的点点滴滴。 搭建Blog基本流程 申请各个网站域名 GitHub创建各个仓库 GoDaddy域名设置，绑定GitHub 安装git（默认） 安装node.js 安装Hexo 配置SSH keys(本地git项目与远程的GitHub建立联系) 关联Hexo与Github 安装git部署插件 更换主题 发布博客 添加 分类、标签和关于页面 添加网易云跟帖 相关参考具体的Blog搭建过程请参考下面链接，自己也是参考下述内容完成Blog的搭建。 廖雪峰的官方网站：http://www.liaoxuefeng.com/ Godaddy域名申请：https://sg.godaddy.com/ 零基础免费搭建个人博客：链接 如何搭建一个独立博客：http://www.jianshu.com/p/05289a4bc8b2 Hexo操作:https://hexo.io/zh-cn/docs/writing.html GitHub+Hexo 搭建个人网站详细教程：https://zhuanlan.zhihu.com/p/26625249 Markdown 语法说明 (简体中文版)：http://wowubuntu.com/markdown/index.html#philosophy NexT主题：http://theme-next.iissnan.com/getting-started.html 修改Hexo的Next主题：链接 网易云跟帖：https://gentie.163.com/index.html 七牛云：https://www.qiniu.com/ 通过阅读以上相关内容，可以完成自己blog的搭建，读者如果感兴趣，可到我的GitHub上下载。注：详细的搭建过程可参考如下：http://download.csdn.net/detail/guanbaisheng/9866959]]></content>
      <categories>
        <category>Blog搭建</category>
      </categories>
      <tags>
        <tag>Blog搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java反汇编]]></title>
    <url>%2F2017%2F05%2F27%2F20170527_Java%E5%8F%8D%E6%B1%87%E7%BC%96%2F</url>
    <content type="text"><![CDATA[javap是JDK自带的反汇编器，可以查看java编译器生成的字节码。同时可对照源代码和字节码，了解很多编译器内部的工作。本文将对以下代码进行反汇编： public class Main { public static void main(String[] args) { String mango = &quot;mango&quot;; String s = &quot;abc&quot; + mango + &quot;def&quot; + 47; System.out.println(s); } } 命令： javap -help 可查看相关操作 输入命令： javap -c Main 对上述代码进行反汇编]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>